getwd()
ls
setwd("/media/Storage/GitHub/Coursera/Getting and Cleaning Data/Week4/")
ls
dir()
edit("quizScript.R")
file.edit("quizScript.R")
dir9)
dir()
if ((Sys.info()["nodename"]) == "jerrison-Think-ubuntu") {
setwd(paste("/home/jerrison/Documents/Github/Coursera",
"/Getting and Cleaning Data/Week4", sep = ""))
} else print("unknown machine being used")
library(dplyr)
library(downloader)
install.packages("dplyr")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download(fileUrl1, "housingData.csv")
housingData <- read.csv("housingData.csv")
housingData <- tbl_df(housingData)
housingData
head(housingData)
housingData$WGTP
housingDataNames <- names(housingData)
str(housingDataNames)
temp1 <- strsplit(housingDataNames, "wgtp")
temp1[[123]]
library(downloader)
install.packages("downloader")
library(downloader)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download(fileUrl2, "GDP_data.csv")
GDPData <- read.csv("GDP_data.csv")
library(dplyr)
GDPData <- tbl_df(GDPData)
GDPData
GDPData <- read.csv("GDP_data.csv", skip = 4)
GDPData <- tbl_df(GDPData)
GDPData
tail(GDPData)
?gsub
names(GDPData)
GDP <- GDPData[, "X.4"]
head(GDP)
tail(GDP)
GDP <- gsub(",", "", GDP)
GDP
head(GDP)
GDP <- as.numeric(gsub(",", "", GDP))
?as.numeric
GDP <- as.numeric(gsub(",", "", GDP))
head(GDP)
GDP <- GDPData[, "X.4"]
head(GDP)
GDP <- as.numeric(gsub(",", "", GDP))
head(GDP)
GDP
GDP <- GDPData[, "X.4"]
head(GDP)
GDP <- as.numeric(GDPData[, "X.4"])
GDPData
GDPData <- read.csv("GDP_data.csv", skip = 4, stringsAsFactors = FALSE)
GDPData <- tbl_df(GDPData)
GDPData
GDP <- GDPData[, "X.4"]
GDP <- as.numeric(gsub(",", "", GDP))
head(GDP)
GDP <- data.frame(GDPData[, "X.4"])
GDP <- data.frame(GDPData[, "X.4"])
head(GDP)
tail(GDP)
GDP <- as.numeric(gsub(",", "", GDP))
GDP <- data.frame(GDPData[, "X.4"])
GDP <- GDP[GDP != ""]
GDP <- as.numeric(gsub(",", "", GDP))
head(GDP)
tail(GDP)
tail(GDP)
tail(GDP)
GDP <- data.frame(GDPData[, "X.4"])
GDP <- GDP[GDP != ""]
head(GDP)
tail(GDP)
unique(GDP)
GDP <- as.numeric(gsub(",", "", GDP))
mean(GDP, na.rm = TRUE)
read.csv
?read.csv
fix(GDPData)
fix(GDPData)
GDPData <- read.csv("GDP_data.csv", skip = 4, nrows = 195)
GDPData <- tbl_df(GDPData)
tail(GDPData)
GDPData <- read.csv("GDP_data.csv", skip = 4, nrows = 190)
GDPData <- tbl_df(GDPData)
tail(GDPData)
GDP <- data.frame(GDPData[, "X.4"])
GDP <- GDP[GDP != ""]
GDP <- as.numeric(gsub(",", "", GDP))
mean(GDP, na.rm = TRUE)
GDPData
countryNames <- GDPData(, "X.3")
countryNames
countryNames <- GDPData[, "X.3"]
countryNames
grep("^United", countryNames)
grep("United", countryNames)
countryNames
countryNames <- as.character(GDPData[, "X.3"])
countryNames
GDPData <- read.csv("GDP_data.csv", skip = 4, nrows = 190, stringsAsFactors =
FALSE)
GDPData <- tbl_df(GDPData)
tail(GDPData)
countryNames <- (GDPData[, "X.3"])
countryNames
grep("United", countryNames)
grep("^United", countryNames)
grep("United", countryNames)
grep("*United", countryNames)
countryNames
print(countryNames)
print.tbl_df(countryNames)
library(dplyr)
dplyr::print.tbl_df(countryNames)
dim(countryNames)
grep("*United", countryNames)
grep("United$", countryNames)
grep("^United", countryNames)
grep("United", countryNames)
grep("^United", countryNames)
countryNames
grepl("^United", countryNames)
?grep
countryNames <- as.vector((GDPData[, "X.3"]))
countryNames
grep("^United", countryNames)
grep("United", countryNames)
grep[grep("United", countryNames)]
grep[grep("United", countryNames),]
grep("China", countryNames)
grep("China", countryNames, value = TRUE)
grep("United", countryNames, value = TRUE)
grep("United", countryNames)
grepl("United", countryNames)
countryNames
countryNames <- (GDPData[, "X.3"])
countryNames
grep("^United", countryNames)
grepl("United", countryNames)
grepl("China", countryNames)
grep("China", countryNames)
grepl("China", countryNames)
GDPData <- read.csv("GDP_data.csv", skip = 4, nrows = 190, stringsAsFactors =
FALSE, row.names = FALSE)
GDPData <- read.csv("GDP_data.csv", skip = 4, nrows = 190, stringsAsFactors =
FALSE, row.names = "")
?read.csv
temp2 <- c("United States", "United Kingdowm")
grep("United", temp2)
temp2
class(temp2)
countryNames <- as.character((GDPData[, "X.3"]))
countryNames
grep("^United", countryNames)
grep("China", countryNames)
class(countryNames)
countryNames
countryNames <- as.data.frame((GDPData[, "X.3"]))
countryNames
grep("^United", countryNames)
grep("China", countryNames)
class(countryNames)
grep("United", countryNames)
grep("Tuvalu", countryNames)
temp2
countryNames <- data.frame(GDPData[, "X.3"])
countryNames
grep("United", countryNames)
grep("Tuvalu", countryNames)
grepl("Tuvalu", countryNames)
countryNames[1]
countryNames[1,]
grep("United", countryNames[,1])
countryNames[1,]
countryNames[1,1]
countryNames[1,2]
countryNames[1,3]
countryNames[1,1]
countryNames[,1]
countryNames <- countryNames[,1]
countryNames
class(countryNames)
grep("United", countryNames)
grep("Tuvalu", countryNames)
grep("United", countryNames)
grep("^United", countryNames)
countryNames[grep("^United", countryNames)]
fileUrl3 <- paste0("https://d396qusza40orc.cloudfront.net/",
"getdata%2Fdata%2FEDSTATS_Country.csv")
download(fileUrl3, "EducationalData.csv")
EducationalData <- read.csv("EducationalData.csv")
EducationalData
EducationalData <- tbl_df(EducationalData)
EducationalData
?merge
GDPData
EducationalData
mergedData <- merge(GDPData, EducationalData, by.x = "X", by.y = "CountryCode")
mergedData
mergedData <- tbl_df(mergedData)
mergedData
names(mergedData)
mergedData[, 20]
mergedData[, 21]
EducationalData
GDPData
tail(GDPData)
GDPData1 <- read.csv("GDP_data.csv")
GDPData1
EducationalData
names(EducationalData)
grep("year", names(EducationalData))
EducationalData[, c(11, 12, 16)]
grep("fiscal", names(EducationalData))
EducationalData
names(EducationalData)
tail(GDPData)
tail(GDPData1)
GDPData1
EducationalData <- read.csv("EducationalData.csv")
EducationalData
fix(EducationalData)
EducationalData <- read.csv("EducationalData.csv")
EducationalData <- tbl_df(EducationalData)
mergedData <- merge(GDPData, EducationalData, by.x = "X", by.y = "CountryCode")
mergedData <- tbl_df(mergedData)
names(mergedData)
mergedData$Special.Notes
grep("June", mergedData$Special.Notes)
grepl("June", mergedData$Special.Notes)
sum(grepl("June", mergedData$Special.Notes))
mergedData$Special.Notes
sum(grepl("Fiscal year end: June", mergedData$Special.Notes))
dim(mergedData)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign = FALSE)
sampleTimes <- index(amzn)
sampleTimes
amzn
head(amzn)
head(sampleTimes)
?POSIXct
convertedTimes <- as.POSIXct(sampleTimes)
convertedTimes
convertedTimes[1]
mday(convertedTimes[1])
convertedTimes <- as.POSIXlt(sampleTimes)
head(convertedTimes)
mday(convertedTimes[1])
day(convertedTimes[1])
wday(convertedTimes[1])
weekday(convertedTimes[1])
weekdays(convertedTimes[1])
convertedTimes <- as.POSIXct(sampleTimes)
weekdays(convertedTimes[1])
convertedTimes <- as.POSIXct(sampleTimes)
weekdays(convertedTimes[1])
convertedTimes2 <- as.POSIXlt(sampleTimes)
wday(convertedTimes2[1])
weekdays(convertedTimes[1])
weekdays(convertedTimes2[1])
head(amzn)
head(sampleTimes)
head(convertedTimes2)
head(convertedTimes)
convertedTimes <- as.Date(sampleTimes)
head(convertedTimes)
weekdays(convertedTimes[1])
convertedTimes <- as.Date(sampleTimes)
convertedTimes
head(sampleTimes)
head(convertedTimes)
weekday(sampleTimes)
weekday(sampleTimes[1])
weekdays(sampleTimes[1])
convertedTimes <- as.Date(sampleTimes)
convertedTimes
class(convertedTimes)
class(sampleTimes)
sampleTimes <- index(amzn)
sampleTimes
grepl("2012", sampleTimes)
sum(grepl("2012", sampleTimes))
weekdays(sampleTimes)
2012Entries <- sampleTimes[grepl("2012", sampleTimes)]
2012Times <- sampleTimes[grepl("2012", sampleTimes)]
Times2012 <- sampleTimes[grepl("2012", sampleTimes)]
head(Times2012)
grepl("Monday", weekdays(Times2012)
grepl("Monday", weekdays(Times2012))
grepl("Monday", weekdays(Times2012))
sum(grepl("Monday", weekdays(Times2012)))
swirl()
install.packages("swirl")
swirl()
library(swirl)
install.packages("swirl")
install.packages("curl")
install.packages("curl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
students2
submit()
students3
?gather
students
students3
gather(students3, class, count, -(name:test), na.rm = TRUE)
res2 <- gather(students3, class, count, -(name:test), na.rm = TRUE)
res2
?separate
res2 <- gather(students3, class, grade, -(name:test), na.rm = TRUE)
res2
res2
res3 <- separate(res2, test, c("final", "midterm"))
res3
?chain
?gather
gather( class, grade, -(name:test) , na.rm = TRUE) %>%
gather( student3, class, grade, -(name:test) , na.rm = TRUE)
gather(student3, class, grade, -(name:test) , na.rm = TRUE)
gather(students3, class, grade, -(name:test) , na.rm = TRUE)
submit()
?spread
submit()
submit()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
submit()
extract_numeric("class5")
?mutate
submit()
submit()
students4
?select
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
submit()
?separate
submit()
?group_by
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- depart + hours(17) + minutes(34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
