f()
f <- function(num) {
for(i in seq_len(num)) {
cat("Hello, world!/n")
}
}
f(3)
f <- function(num) {
hello <- "Hello, world!\n"
for(i in seq_len(num)) {
cat(hello)
}
chars <- nchar(hello)*num
chars
)
f <- function(num) {
hello <- "Hello, world!\n"
for(i in seq_len(num)) {
cat(hello)
}
chars <- nchar(hello)*num
chars
}
meaningoflife <- f(3)
print(meaningoflife)
meaningoflife
?nchar
formals(f)
str(rnorm)
mydata <- rnorm(100, 2, 1)
f <- function(a, b) {
a^2
}
f(2)
f(2, 4)
?plot
myplot <- function(x, y, type = "l", ...) {
plot(x, y, type = type, ... )
}
mean
search()
f <- function(x, y) {
x^2 + y / z
}
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
cube
ls(environment(cube))
get("n", environment(cube))
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
make.NegLogLik <- function(data, fixed = c(FALSE, FALSE)) {
params <- fixed
function(p) {
}
}
ls()
source("learn_temp1.R")
ls()
str(make.NegLogLik)
set.seed(1)
normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu = 0, sigma =1), nLL)$par
nLL <- make.NegLogLik(normals, c(FALSE,2))
optimize(nLL, c(-1,3))$minimum
nLL <- make.NegLogLik(normals, c(1, FALSE))
optimize(nLL, c(1e-6, 10))$minimum
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
dir()
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
?which
andy[which(andy$Day ==30), "Weight"]
andy[which(andy[,"Day"] == 30), "Weight"]
subset(andy$Weight, andy$Day == 30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_start
andy_end
andy_loss <- andy_start - andy_end
andy_loss
files <- list.files("diet_data")
files
files[1]
files[3:5]
head(read.csv(files[3]))
files
head(read.csv(files[3]))
files.full <- list.files("diet_data", full.names = TRUE)
files_full
files.full
files_full <- list.files("diet_data", full.names = TRUE)
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25),]
day_25
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
median(dat$Weight)
dat
median(dat$Weight, na.rm = TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
source("learn_temp1.R")
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data/", 4)
weightmedian("diet_data", 4)
lapply
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
lapply(x, mean())
str(runif)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) {elt[,1]})
x
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
?rnorm
str(rnorm)
lapply(x, mean)
y <- sapply(x, mean)
y]
y
install.packages("MASS")
head(Boston)
library("MASS")
head(Boston)
library(ISLR)
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
?which
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R', echo=TRUE)
college[which(college$Top25perc == 100), 2]
fix(college)
college[which(college$Top25perc == 100), 0]
college[which(college$Top25perc == 100), row.names]
college[which(college$Top25perc == 100), row.names()]
college[which(college$Top25perc == 100)]
[which(college$Top25perc == 100)]
which(college$Top25perc == 100)
head(college)
row.names(college)
row.names(college)[1]
row.names(college)[college[which(college$Top25perc == 100), 1]]
row.names(college)[which(college$Top25perc == 100)]
fix(college)
head(college)
college[,1]
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R', echo=TRUE)
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
rownames(college)
college <- College
college[,1]
head(college)
fix(college)
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
summary(college)
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
?pairs
?plot
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
hist(college$perc.alumni)
hist(college$perc.alumni, col = 2)
hist(college$S.F.Ratio, col = 3)
hist(college$S.F.Ratio, col = 3, breaks = 10)
hist(college$S.F.Ratio, col = 3, breaks = 100)
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
par(mfro <- c(2,2))
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
par(mfro <- c(2,2))
hist(college$Apps)
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
par(mfrow <- c(2,2))
hist(college$Apps)
hist(college$perc.alumni, col = 2)
?par
par(mfrow <- c(2,2))
head(Auto)
dim(Auto)
dim(na.omit(Auto))
na.omit(Auto)
complete.cases(Auto)
na.omit(Auto)
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
summary(Auto)
fix(Auto)
fix(Auto)
names(Auto)
dim(Auto)
range(Auto$mpg)
str(Auto)
range(Auto[, 1:9])
range(Auto)
seq_along(names(Auto))
seq_along(names(Auto)-2)
seq_along(names(Auto))-2
range(Auto$name)
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
?print
?sep
?cat
names(Auto)
names(Auto)[1]
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
source('H:/Documents/GitHub/ContinuingEducation/DataScience/An Introduction to Statistical Learning/Chapter2/Applied.R')
getwd()
source('~/.active-rstudio-document')
if (!file.exists("data")) {
dir.create("data")
}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accesType=DOWNLOAD"
download.file(fileUrl, destfile = "cameras.csv", method = "curl")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "cameras.csv", method = "curl")
?dir.create
unlink("data")
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
source('~/.active-rstudio-document')
names(rootNode)
head(rootNode)
xmlSApply(rootNode, xmlValue)
source('~/.active-rstudio-document')
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
library(jsonlite)
source('~/.active-rstudio-document')
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
cat
str(cat)
?cat
library(data.table)
install.packages("data.table")
library(data.table)
library(data.table)
source('~/.active-rstudio-document')
head(DF, 3)
source('~/.active-rstudio-document')
head(DF, 3)
head(DF, 3)
head(output1, 3)
output1
source('~/.active-rstudio-document')
tables()
head(DT, 3)
tables*()
tables()
tables
table
table()
tables()
source('~/.active-rstudio-document')
tales()
tables()
DT[2,]
which(DT$y == "a")
DT[which(DT$y == "a"),]
DT[DT$y == "a",]
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
path2csv
mydf <- read.csv("path2csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
swirl()
library("xlsx")
library(data.table)
vignette()
vignette("datatable-intro")
library(ggplot2)
library("ggplot2")
install.packages("ggplot2")
vignette("datatable-intro-vignette")
vignette("datatable-intro-vignette")
vignette("datatable-keys-fast-subset")
library(rJava)
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
vignette()
vignette(xlsx)
vignette("xlsx")
vignette("datatable-intro")
vignette("datatable-intro-vignette")
vignette("datatable-intro-vignette")
vignette("datatable-keys-fast-subset")
vignette("datatable-intro-vignette")
vignette("datatable-intro")
?data.table
library(data.table)
?data.table
vignette("datatable-intro-vignette")
?vignette
browseVignettes()
vignette("datatable-intro-vignette")
install.packages(c("crayon", "curl", "git2r", "httr", "jsonlite", "manipulate", "mime", "packrat", "Rcpp", "roxygen2", "rstudioapi", "stringi", "testthat"))
install.packages("mgcv", lib="C:/Users/lijerri1/Documents/R/R-3.2.3/library")
library("assertthat", lib.loc="~/R/win-library/3.2")
detach("package:assertthat", unload=TRUE)
library("BH")
library("assertthat", lib.loc="~/R/win-library/3.2")
vignette(dplyr)
vignette()
library(XLConnect)
install.packages("XLConnect")
vignette()
vignette("XLConnect")
library(httr)
?vignette
vignette(datatable-intro-vignette )
vignette("datatable-intro-vignette")
?vignettes
browseVignettes()
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "5d0cf71538d41bbad694",
secret = "b6b2122e2fb9db74d8e446ef58c3edc570d0c690")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages(curl)
install.packages("curl")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJson(json1))
json2 <- jsonlite::fromJSON(toJSON(json1))
toJSON
fromJSON
library(jsonlite)
library(JSON)
install.packages(JSON)
install.packages("JSON")
json2 <- jsonlite::fromJSON(toJSON(json1))
json1[1]
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
json[1]
json2[1,]
json2[1,1:4]
json2
names(json2)
json2[,2]
json2[[8]]
json2[json2[,2] == "datasharing", 1]
json2[json2[,2] == "datasharing", "created_at"]
install.packages("sqldf")
getwd()
setwd("..")
dir()
setwd("GitHub/Coursera/Getting and Cleaning Data/Week2/")
dir()
?sqldf
acs <- read.table("getdata_data_ss06pid.csv")
library(sqldf)
sqldf("select * from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
names(acs)
head(acs)
acs <- read.table("getdata_data_ss06pid.csv", header = TRUE)
head(acs)
names(acs)
acs <- read.csv("getdata_data_ss06pid.csv")
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
htmlCode[1]
htmlCode[10]
nchar(htmlCode[c(10, 20, 30, 100)])
data1 <- read.table("getdata_wksst8110.for")
install.packages("readr")
library(readr)
data1 <- read_fwf("getdata_wksst8110.for", skip = 4, fwf_widths(c(-1,9)))
data1 <- read_fwf("getdata_wksst8110.for", skip = 4, fwf_widths(c(9)))
data1
data1 <- read_fwf("getdata_wksst8110.for", skip = 4, fwf_widths(c(9,-5,4)))
?read_fwf
data1 <- read_fwf("getdata_wksst8110.for", skip = 4, fwf_empty("getdata_wksst8110.for")))
fwf_empty
fwf_empty("getdata_wksst8110.for", skip = 4)
data1 <- read_fwf("getdata_wksst8110.for", skip = 4, fwf_empty("getdata_wksst8110.for", skip = 4)))
data1 <- read_fwf("getdata_wksst8110.for", skip = 4, fwf_empty("getdata_wksst8110.for", skip = 4))
head(data1)
fwf_empty("getdata_wksst8110.for", skip = 4)
vec1 <- fwf_empty("getdata_wksst8110.for", skip = 4)
vec1
vec1[1]
class(vec1)
vec2 <- list()
vec2
vec2[[1]]
vec1[1][2]
vec1[1][1]
vec1[1][3]
vec[[1]]
vec1[[1]]
vec1[[1]][2]
vec2 <- list(begin, end)
vec2 <- list("begin", "end")
vec2
vec2 <- data.frame(2,5)
vec2
vec1
vec2 <- list(begin = c(1,2,3,4))
vec2
vec2 <- list(begin = c(1,15,19,28,32,41,45,54,58), end = c(10, 19, 23, 32, 36, 45, 49, 58, 62))
data1 <- read_fwf("getdata_wksst8110.for", skip = 4, vec2)
vec2
vec2 <- list(begin = c(1,15,19,28,32,41,45,54,58), end = c(10, 19, 23, 32, 36, 45, 49, 58, 62),
col_names = c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9"))
data1 <- read_fwf("getdata_wksst8110.for", skip = 4, vec2)
head(data1)
sum(data1[,4])
library(ggplot2)
library(dplyr)
